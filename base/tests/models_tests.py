from datetime import datetime

from restkit import errors

from base import models


class MockGisgraphyResource(object):
    def twitter_loc(self, q):
        q = q.lower()
        if 'bryan' in q:
            return models.GeonamesPlace(lat=31,lng=-96,code="PPLA2",mdist=2)
        elif 'college station' in q:
            return models.GeonamesPlace(lat=30,lng=-96,code="PPLA2",mdist=3)
        elif 'texas' in q:
            return models.GeonamesPlace(lat=31,lng=-99,code="ADM1",mdist=2000)
        else:
            return None


class MockTwitterResource(object):
    def sleep_if_needed(self):
        #Calling sleep() in my unittests may be hazardous to your health!
        pass

    def _raise_on_errors(self,user_id):
        if user_id==404:
            raise errors.ResourceNotFound()
        elif user_id in (401,403):
            raise errors.Unauthorized()
        elif 400<=user_id<600:
            raise errors.RequestFailed(http_code=user_id)

    def get_edges(self, user_id):
        self._raise_on_errors(user_id)
        if user_id == 0:
            friends = followers = [1,3]
        elif user_id == 1:
            friends = followers = [x for x in xrange(10) if x!=1]
        else:
            friends = [1] + range(user_id*2,user_id*6,user_id)
            followers = [1] + [x for x in xrange(2,user_id) if not user_id%x]

        edges = models.Edges(_id=user_id,friends=friends,followers=followers)
        if user_id == 6:
            edges.friends.append(0)
            edges.followers.append(0)
        return edges

    def user_timeline(self, user_id):
        self._raise_on_errors(user_id)
        tweet = models.Tweet(
            _id = user_id,
            mentions = [],
            text = "howdy",
            created_at = datetime.utcnow(),
            user_id = user_id
        )

        if user_id==3:
            tweet.mentions = [2]
        if user_id==6:
            tweet.mentions = [7]
        return [tweet]*10

    def user_lookup(self, user_ids=[]):
        self._raise_on_errors(user_ids[0])
        names = dict(enumerate([
            'Joyce','Alberto','Beryl','Chris','Debby','Ernesto','Florence',
            'Gordon','Helene','Issac',
            ]))

        users = []
        for uid in user_ids:
            if uid is None:
                users.append(None)
                continue

            user = models.User(
                _id = uid,
                verified = False,
                followers_count = uid*uid,
                friends_count = 2+uid*uid,
                name = names.get(uid,"Anon"),
                loc = "College Station, TX",
                screen_name = "user_{}".format(uid),
                )
            if uid==3:
                user.loc = "Bryan, TX"
            elif uid==7:
                user.loc = "Texas"
            users.append(user)
        return users


# FIXME: right now there is just a method that adds some immutable data to the
# database to run tests against. This needs some cleaning up.
def save_fixtures():
    save_users()

    twit = MockTwitterResource()
    for uid in xrange(10):
        twit.get_edges(uid).save()
        tweets = models.Tweets( _id=uid, tweets=twit.user_timeline(uid) )
        tweets.save()

def save_users():
    users = MockTwitterResource().user_lookup(xrange(10))

    # We add some data that will be generated by the crawler for testing
    # the rest of the codebase.
    for index,user in enumerate(users):
        # shift the city around a bit so we know who is where
        user.gnp = models.GeonamesPlace(
            feature_id=4682464,
            lat=30+index*.1,
            lng=-96.334,
            mdist=1.890,
            name="College Station",
            )

    users[3].median_loc = [-96,30]
    users[3].rfriends = [1]
    users[3].just_friends = [6,9]
    users[3].just_followers = []
    users[3].just_mentioned = [2]

    users[6].median_loc = [-96,31]
    users[6].rfriends = [0,1]
    users[6].just_friends = []
    users[6].just_followers = [2,3]
    users[6].just_mentioned = [7]

    users[7].protected = True
    for user in users:
        user.save()

